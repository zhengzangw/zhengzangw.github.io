<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[S] 计算机图形学 Computer Grphics on Zangwei</title>
    <link>https://zhengzangw.com/notes/computer-graphics/</link>
    <description>Recent content in [S] 计算机图形学 Computer Grphics on Zangwei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</managingEditor>
    <webMaster>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</webMaster>
    <lastBuildDate>Thu, 14 Feb 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengzangw.com/notes/computer-graphics/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1. 计算机图形学概述</title>
      <link>https://zhengzangw.com/notes/computer-graphics/1-introduction/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/1-introduction/</guid>
      <description>发展简况 计算机图形技术范式演化 显示方式 对象和命令指定方式 显示控制方式 应用控制方式 字符显示 文字+数字的伪图形 命令行 文本格式编码 单任务 矢量显示 笔画文字和线画图形 命令行，功能键和菜单 伪直接操纵方式 单/多任务 二维光栅扫描显示 窗口，图标，文字和丰富色彩 GUI, WIMP 桌面隐喻，WYSIWYG 多任务，网络号 C/S 计算，多窗口管理 图形工作站及多视角投影(3DTV) 实时三维景象，实物虚化 虚拟显示，增强显示 WYSIAYG, WYPIWYG 集群化，网格化 计算机使用模式：无图形系统&amp;ndash;非直接操纵&amp;ndash;桌面隐喻&amp;ndash;自然多通道 人机界面 第一代：形式语言/类自然语言 第二代：桌面隐喻，直接操纵，WYSIWYG 当代：多媒体+多通道 虚拟现实 未来：自然人机交互 硬件技术 1960 字符显示器 1963 矢量显示器 1972 CRT显示器 1986 三维图形工作站 3D 输入技术，专用图形处理芯片，分式系统和并行系统 2000 数字墨水显示器 交互式图形系统 1963 年 SketchPad 诞生 交互式图形显示技术 1950~ 防空系统 SAGE 计算机图形系统标准 GKS(Graphical Kernal System) PHIGS(Programmer&amp;rsquo;s Hierarchical Interactive Graphics System) 工业系统 OpenGL DirectX X-Window Postscript 主要内容 建模 传统内容：几何对象及其图像的生成，存储和操纵 技术拓展：结合音视频的图形合成，声音和视频驱动的图形生成 基础问题：如何在计算机内建立客观世界的对象模型 难点：尽可能保持客观世界对象本身的性质并反映用户对它的理解 交互生成 感知获取 绘制 传统内容：在屏幕和硬拷贝设备上输出图像 技术拓展：图像处理，改善图形显示和输出质量 基础问题：如何在输出设备上再现客观世界的对象 难点：巨量信息处理的实时性及对客观世界模拟的逼真度 图形硬件的能力和性能 图形绘制处理和操纵算法 交互 传统内容：用户对对象和图像的内容结构及外在表现的控制 技术拓展：触觉输入和输入，显示化图形输入和操纵方式 软件体系 计算机图形系统处理流程 图形建模（建模坐标系） 模型变换（世界坐标系） 观察变换/视角选择（观察坐标系） 投影变换（投影坐标系） 工作站变换/设备选择（设备坐标系） 图形显示 计算机图形系统软件组成 数据平台：对象描述模型，表示生成图形对象的全部描述信息（可以有数据完全刻画，也可以有数据和过程共同刻画）</description>
    </item>
    
    <item>
      <title>2. 图形设备输出原理</title>
      <link>https://zhengzangw.com/notes/computer-graphics/2-resterscan/</link>
      <pubDate>Fri, 14 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/2-resterscan/</guid>
      <description>图形输出颜色模型 标准颜色模型 XYZ 模型 XYZ 颜色模型 加色空间：三基色 XYZ 为虚颜色 一组彩色匹配函数：描述任意光谱色所需每种基色的量 $F = X +Y[Y]+Z[Z]$ $X,Y,Z$ 匹配 $F$ 色需要的基色的权 $ ,[Y],[Z]$: 三维加色空间向量 CIE-XYZ （国际照明委员会 CIE 1931） 色度：平面 $X+Y+Z=1$ 亮度值：分量 $Y$ 规范化基色权向量得到 $(x,y,z)$ 在平面 $X+Y+Z=1$ 上 色度坐标 $(x,y)$: 原点与点 $(x,y,z)$ 连接线上所有颜色，决定色彩和纯度 一种颜色的完整描述 $(x,y,Y)$ CIE-XYZ 色度图：将 $X+Y+Z=1$ 平面投影到 $XY$ 平面上 舌头装曲线：边界和内部表示所有可见光色度值 边界上的点：纯彩色 C 点：白色位置，约为 $(\frac{1}{3},\frac{1}{3},\frac{1}{3})$，为平均日光近似标准 紫红线：不属于光谱 不可能有一个三角形包含所有颜色 速度图颜色特性 互补色：位于 C 两侧且通过 C 的直线上两点 主波长：与 C 连线交于非紫红线上点 颜色模型：在摸个色彩空间中方便地生成指定颜色 颜色计算模型 Lab 模型 CIE Lab 模型描述正常视力的人能看到的颜色 亮度成分 色度成分 $[-120,+120]$ a 成分：红色到绿色的变化 b 成分：黄色到蓝色的变化 与设备无关 俗语宽阔 显示设备模型 RGB 模型 加色模型，单位立方体 打印设备模型 CMY 模型 减色模型 CMYK 模型 $(C, M, Y)=(1,1,1)-(R,G,B)$ 用户交互模型 HSV 模型 HSV 模型 色彩 H: 0 为红色，互补色 180 度 饱和度 S：水平轴，白色纯度为 0，S=1 为纯彩色 明度值 V：垂直轴，锥顶点为黑色 加白色：S 减小，V 不变 加黑色：V 减小，S 不变 同时加白色和黑色：同时减小 V 和 S，可指定各种色调 Tektronix 公司 HLS 模型 色彩 H：0 位蓝色 亮度 L：垂直轴，L=0 为嘿，L=1 为白，L=0.</description>
    </item>
    
    <item>
      <title>3. 图元生成算法</title>
      <link>https://zhengzangw.com/notes/computer-graphics/3-primitives/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/3-primitives/</guid>
      <description>线画图元生成算法 输出图元 (Output Primitive) 线画图元：矢量表示 填充图元：点阵表示 输出图元生成：图像的设备级算法 点 随机扫描：电子束定位于指定位置 光栅扫描：根据帧缓冲器设置电子脉冲强度 线 随机扫描：按 $x$ 和 $y$ 方向线性增量改变水平和垂直偏转电压 光栅扫描：绘制两端点间的离散点 线画图元生成：线段通过像素绘制 扫描转换：按光栅扫描显示原理对数学表示的线段离散取样的方法 像素网格坐标：对象与像素中心对准，像素点区域坐标在像素点中心 屏幕网格坐标：物体边界与像素边界对准，像素点坐标有像素区域左下角整数网格坐标指定 数值差分析算法 DDA $y=kx+b$ $|k|\leq 1$：取 $\Delta x=1$，$y_{i+1}=y_i+k$，坐标取整 $|k|&amp;gt;1$: 取 $\Delta y=1$，$x_{i+1}=x_i+\frac{1}{k}$ 优点：加法计算速度快 缺点：像素位置需取整 累积误差 取整操作和浮点预算耗时 直线图元生成算法 Bresenham $y=mx+b$ 屏幕坐标：$x_{k+1}=x_k+1,y_{k+1}=y_k+1$ 像素位置 $x_{k+1}$ 处线段的数学点坐标：$y=m(x_k+1)+b$ 垂直偏移 $d_1=y-y_k=m(x_k+1)+b-y_k$ $d_2=y_{k+1}-y=y_{k+1}-m(x_k+1)-b$ 距离差：$d_1-d_2=2m(x_k+1)-2y_k+2b-1$ $\Delta x(d_1-d_2)=2\Delta yx_k-2\Delta xy_k+c$ 决策参数：$p_k=\Delta x(d_1-d_2)=2\Delta yx_k-2\Delta xy_k+c$ $p_k&amp;gt;0,d_2&amp;lt;d_1$，选择 $(x_{k+1},y_{k+1})$ $p_k&amp;lt;0,d_2&amp;gt;d_1$，选择 $(x_{k+1},y_{k})$ 增量计算：$p_{k+1}=p_k+2\Delta y-2\Delta x(y_{k+1}-y_k)$ 增量选择 $|m|&amp;lt;1$：沿 $x$ 方向 $|m|&amp;gt;1$：沿 $y$ 方向 直线生成方向与坐标轴同：坐标增量为正 直线生成方向与坐标轴反：坐标增量为负 水平线和垂直线直接装载 void Bresenham(int x_0, int y_0, int delta_x, int delta_y){ //|m|&amp;lt;1,直线生成方向与坐标轴同 int p = 2*delta_y-delta_x; int x = x_0, y = y_0; Draw(x, y); for (int k=1;k&amp;lt;=delta_x;++k){ x += 1; if (p&amp;lt;0){ p += 2*delta_y; } else { y += 1; p += 2*delta_y-2*delta_x; } Draw(x,y); } } 曲线图元生成算法 中点圆算法 $f(x,y)=x^2+y^2-r^2$ $y_{k+1}=y_k-1$ 平移：圆心 $(x_c,y_c)$ 对称：$x=0$ 到 $x=y$ 八分之一 决策参数：$p_k=f(x_{k+1},\frac{y_k+y_{k+1}}{2})=f(x_{k+1},y_k-\frac{1}{2})$ $p_k&amp;gt;=$：圆周外/上，$y_{k-1}$ $p_k&amp;lt;0$：圆周内，$y_k$ void drawCircle(int x_c, int y_c, int r){ int x = 0, y = r; int p =5/4-r; while (x&amp;gt;=y){ x += 1; if (p&amp;lt;0) { p += 2*x+1; } else { y -= 1; p += 2*x+1-2*y; } P = getSymmetryPoints(x,y); moveToCenter(P, x_c, y_c); drawSet(P); } } 椭圆生成算法 $f(x,y)=r_y^2x^2+r_x^2y^2-r_x^2r_y^2$ 斜率：$\frac{dy}{dx}=-\frac{2r_y^2x}{2r_x^2y}$ 第一象限分为斜率&amp;lt;-1 和&amp;gt;-1 两个区域，分别为区域 1 和区域 2 $p1=f(x_{k+1},y_k-\frac{1}{2})=r_y^2(x_k+1)^2+r_x^2(y_k-\frac{1}{2})^2-r_x^2r_y^2$ $p1&amp;lt;0,y_{k+1}=y_k$ $p\geq 0,y_{k+1}=y_k-1$ $p2=f(x+\frac{1}{2},y_k-1)=r_y^2(x_k+\frac{1}{2})^2+r_x^2(y_k-1)^2-r_x^2r_y^2$ $p2&amp;gt;0,x_{k+1}=x_k$ $p2\leq0,x_{k+1}=x_k+1$ 其它曲线 圆锥曲线，三角和指数函数，概率分布，多项式核样条函数 直接逼近法 直线拟合法 中点法 利用对称性 线画图元生成的帧缓冲器地址计算 单色系统 $\text{addr}(x,y)=\text{addr}(0,0)=y(x_{\max}+1)+x$ $\text{addr}(x+1,y)=\text{addr}(x,y)+1$ $\text{addr}(x+1,y+1)=\text{addr}(x,y)+x_{\max}+2$ 彩色系统：乘以像素位数 $n$ 线画图元生成的并行处理算法 将直线分割成多个子段，每个子段用 Bresenham 算法，同时生成线段 子段分割分配：按处理器数目分段；宽度可能不同 扫描线/像素列像素分配：顺序算法可能较慢 区域像素分配 线画图元生成的反走样技术 走样：低频取样不充分造成信息失真 将直线段看做具有一定长度的矩形，根据与像素的相交区域确定像素亮度级 直线段过取样 像素亮度等级 = 像素区域内子像素总数 区域取样：像素亮度正比于像素与有限宽线的重迭区域（线宽被覆盖的像素数目） 线亮度差矫正 水平和垂直线：最低亮度 45 度线：最高亮度 加权区域采样 像素亮度对直线段的贡献程度正比于相交区域与像素中心的距离 加权掩膜：指定子像素相对重要性值的数组 过滤技术：连续加权曲面或过滤函数覆盖像素 硬件反走样（像素位移）：移动像素区域的显示位置 填充图元生成算法 顶点表示 扫描填充：求出位于内部的各个像素 扫描线求交：多边形边界转换为像素 区域连通性：多边形内部转换为有效连通区域 点阵表示 区域填充：从区域的一个内点出发，将颜色扩展到整个区域 区域连通性：区域内部像素有效连通 内外点测试：起始种子为内点 填充格式 颜色边界空心区域 实心区域 图案区域 扫描转换算法 顶点表示 -&amp;gt; 点阵表示</description>
    </item>
    
    <item>
      <title>4.变换</title>
      <link>https://zhengzangw.com/notes/computer-graphics/4-transformation/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/4-transformation/</guid>
      <description>基本几何变换 二维齐次坐标 $(x,y,h)$ 二维变换 变换 变换矩阵 平移 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; t_x\newline 0 &amp;amp; 1 &amp;amp; t_y\newline 0 &amp;amp; 0 &amp;amp; 1\newline \end{bmatrix}$ 旋转 $\begin{bmatrix} \cos\theta &amp;amp; -\sin\theta &amp;amp; 0\newline \sin\theta &amp;amp; \cos\theta &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1\newline \end{bmatrix}$ 缩放 $\begin{bmatrix} s_x &amp;amp; 0 &amp;amp; 1 \newline 0 &amp;amp; s_y &amp;amp; 1\newline 0 &amp;amp; 0 &amp;amp; 1\newline \end{bmatrix}$ 错切 $\begin{bmatrix} 1 &amp;amp; sh_x &amp;amp; -sh_xy_{ref}\newline 0 &amp;amp; 1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1\newline \end{bmatrix}$ 三维齐次坐标 $(x,y,z,h)$ 变换 变换矩阵 平移 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; t_x\newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; t_y\newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; t_z\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ 缩放 $\begin{bmatrix} s_x &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; s_y &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; s_z &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ 旋转 Z 轴 $\begin{bmatrix} \cos\theta &amp;amp; -\sin\theta &amp;amp; 0 &amp;amp; 0\newline \sin\theta &amp;amp; \cos\theta &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ 旋转 X 轴 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; \cos\theta &amp;amp; -\sin\theta &amp;amp; 0\newline 0 &amp;amp; \sin\theta &amp;amp; \cos\theta &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ 旋转 Y 轴 $\begin{bmatrix} \cos\theta &amp;amp; 0 &amp;amp; \sin\theta &amp;amp; 0\newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\newline -\sin\theta &amp;amp; 0 &amp;amp; \cos\theta &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ $xy$ 平面反射 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; -1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ $yz$ 平面反射 $\begin{bmatrix} -1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 1 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ $xz$ 平面反射 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; -1 &amp;amp; 0 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ $z$ 轴错切 $\begin{bmatrix} 1 &amp;amp; 0 &amp;amp; sh_x &amp;amp; 0\newline 0 &amp;amp; 1 &amp;amp; sh_y &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 1 &amp;amp; 0\newline 0 &amp;amp; 0 &amp;amp; 0 &amp;amp; 1\end{bmatrix}$ 任意轴旋转和旋转角旋转变换 $R(\theta)=T^{-1}R^{-1}R_z(\theta)RT$ $R=R_y(\beta)R_x(\alpha)$ 将旋转轴与 $z$ 轴重合 二维观察变换 窗口：指定图形要显示部分的区域 视区：窗口指定区域映射到输出设备上的区域 窗口到视区变换 $x_v=x_{v\min}+(x_w-x_{w\min})s_x,s_x=\frac{x_{v\max}-x_{v\min}}{x_{w\max}-x_{w\min}}$ $y_v=y_{v\min}+(y_w-y_{w\min})s_y,s_y=\frac{y_{v\max}-y_{v\min}}{y_{w\max}-y_{w\min}}$ 三维观察变换 观察/参考坐标系：指定观察位置和投影平面位置</description>
    </item>
    
    <item>
      <title>5.剪裁</title>
      <link>https://zhengzangw.com/notes/computer-graphics/5-trimming/</link>
      <pubDate>Sat, 15 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/5-trimming/</guid>
      <description>点剪裁 $P=(x,y)$ 满足 $x_{w\min}\leq x\leq xw_{\max},y_{w\min}\leq y\leq yw_{\max}$ 则保存
线段剪裁 Cohen-Sutherland 剪裁算法 使用编码测试减少要计算交点的次数 区域码 位一：左边界，$x&amp;lt;x_{w\min}$ 位二：右边界，$x&amp;gt;x_{w\max}$ 位三：下边界，$y&amp;lt;y_{w\min}$ 位四：上边界，$y&amp;gt;y_{w\max}$ 两端点区域码均为 0000：完全区域内 两端点与运算结果不为 0000：完全区域外 其它：求交后按左右上下顺序检测线段端点 梁友栋-Barsky 参数剪裁算法 诱导窗口：线段所在直线与裁剪窗口的交点线段 一维参数表示 $P_1P_2$: $P=P_1+u(P_2-P_1)$ $Q_1:u_1$ $Q_2:u_2$ 判断参数 $\Delta x=x_2-x_1,\Delta y = y_2-y_1$ $p_1=-\Delta x,q_1=x_1-x_{w\min}$ $p_2=\Delta x,q_2=x_{w\max}-x_1$ $p_3=-\Delta y,q_3=y_1-y_{w\min}$ $p_4=\Delta y,q_4=y_{w\max}-y_1$ $r_i=\frac{q_i}{p_i}$ $p_k$： $0$: 平行 $&amp;lt;0$: 从外到内，更新 $u_1=\max(0,r_k)$ $&amp;gt;0$: 从内到外，更新 $u_2=\min(1,r_k)$ 若 $u_1&amp;gt;u_2$，舍弃线段；否则根据 $u$ 求出交点 Nicholl-Lee-Nicholl 剪裁算法 仅适用于二维直线剪裁 确定 $P_1$ 与窗口相对位置（9宫格） 确定 $P_2$ 所在区域（$P_1$对窗口四个顶点做射线） 确定交点 比较和除法次数较少，减少了求交运算 非矩形剪裁窗口剪裁处理 凸多边形：参数化线段裁剪算法可以扩充 圆等曲线边界：涉及非线性方程 圆：先舍弃外接矩形之外，再通过如到圆心距离判断 凹多边形：分解为一组凸多边形 凹多边形判别：绕多边形叉乘出现异号 向量法分解：沿出现异号的叉乘矢量对中第一条边延长线分解多边形 旋转法分解：绕逆时针处理顶点，将某顶点平移到原点，顺时针顺转多边形使下一顶点落在 $x$ 轴上，若再下一点落在 $x$ 下，则多边形为凹多边形，沿 $x$ 轴分解 多边形剪裁 Sutherland-Hodgman 算法 按序逆时针遍历个顶点 起始点和终止点都在窗口边界外侧：不增加 都在内测：输出终止点 外到内，增加交点和终止点 内到外，增加交点 改进：增加点剪裁 缺点：凹多边形剪裁出现多余的线 Weilerr-Atherton 算法 预处理 建立多边形顶点表和裁剪窗口顶点表 求出所有交点 两顶点表中相同交点间建立双向指针 裁剪过程：任选一交点为起点 若为进点，跟踪多边形边界 若为出点，跟踪窗口边界 多边形裁剪的相关问题 多边形窗口 Liang-Barskey 线段裁剪 Weiler 算法 曲线边界区域 文字裁剪 字符串裁剪策略 字符取舍策略 单字符裁剪 外部裁剪 </description>
    </item>
    
    <item>
      <title>6.曲线曲面理论基础</title>
      <link>https://zhengzangw.com/notes/computer-graphics/6-curve-and-surface/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/6-curve-and-surface/</guid>
      <description>曲面参数化 正常情况下参数域内的点与曲面上的点一一对应 曲面上任一点处总有一个 $u$ 向切矢 $p_u$，和一个 $v$ 向切矢 正则点：两切矢不平行的点 奇点 曲面上一一对应关系不成立的点 两切矢垂直的点 切矢为 0 向量的点 曲线曲面生成 数学函数：规则曲线曲面 树节点：自由曲线曲面 样条：柔软细长的弹性木条或金属条 样条曲线 数学：多段低次曲线段构成，连接处有连续一次和二次导数 计算机图形学：多项式曲线段连接，边界处满足特点连续条件 参数化样条曲线曲面：用参数表示的样条曲线曲面 $p()=\sum_{i=0}^na_i\phi_i()$ 系数矢量：$a_i$ $p()$: 单/双参数的矢函数 $\phi_i()$: 单/双参数的基函数 基表示类型 规范基表示：曲线或曲面上的整体满足柯西条件：$\sum_{i=0}^n\phi_i=1$ 部分规范基表示：曲线或曲面上部分段满足：$\sum_{i=0}^{k&amp;lt;n}\phi_i=1$ 非规范基表示 几何不变性：在旋转和平移变换下不变 规范基和部分规范基表示具有几何不变性 非规范基不具有几何不变性 生成方法 插值：曲线通过每个控制点 逼近：不一定通过每个控制点 设计：已知点太少，增加一些点 凸包：包围一组控制点的凸多边形边界 控制多边形：连接有一定次序控制点的直线序列 参数连续性：公共部分匹配参数导数 零阶参数连续性 $C^0$：相连 一阶参数连续性 $C^1$：两段切向量变化率可能会不同（突变，设计应用） 二阶参数连续性 $C^2$：切线平滑变换（电影动画） 高阶参数连续性 几何连续性：两曲线段在相交处参数导数成比例 零阶几何连续性 $G^0$：相连 一阶几何连续性 $G^1$ 二阶几何连续性：曲率连续 函数曲线中参数连续性与几何连续性一致 参数曲线中，仅当曲线为正则是一致性成立 光顺性：过同一数据点且具有相同边界几何约束的两条平面插值曲线相对光顺的四项判据或准则 二阶几何连续 不存在奇点与多余的拐点 曲率变化较小 应变能较小 三次插值曲线曲面 三次插值样条性质
存在唯一性 不存在额外的用于群贤形状控制的自由度 收敛性 计算稳定性 整体性 不易控制 自然插值</description>
    </item>
    
    <item>
      <title>7. 实体造型技术基础</title>
      <link>https://zhengzangw.com/notes/computer-graphics/7-solid-modeling/</link>
      <pubDate>Sun, 16 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei (Alex) Zheng)</author>
      <guid>https://zhengzangw.com/notes/computer-graphics/7-solid-modeling/</guid>
      <description>实体的表示 点集拓扑表示 有效物体（实体）：具有一定形状，具有确定的封闭边界（表面），是一个内部连通的三维点集 内点：点集中完全包含于该点集充分小邻域的点 边界点 正则运算 $r$：先对物体取内点再取闭包 边界 $b$ 内点 $i$ 正则点集：$A=rA$ 实体的可计算性：对于一个占据空间的正则点集，如果其表面是二维流形，则该正则点集为实体 正则集合运算 $A \text{ op}^*\ B=r(A \text{ op } B)$ 只需计算 $b(A\text{ op}^*\ B)$ $b(A\cap^* B)=(bA\cap iB)\cup(bB\cap iA)\cup(bA\cap bB)_{\text{same side}}$ 形体表示 形体信息 集合信息：欧式空间中位置和大小 拓扑信息：各分量数目及其互相间的连接关系 习题表面：封闭，有向，非自交，有界，连续 形体自身：刚性，三维一致性，表示有限性 几何元素 体：欧式空间中非空有界的封闭子集 体素：能用有限个尺寸参数定义一个简单封闭空间 长方体，圆柱体，球体，代数半空间，参数定义的截面旋转 壳：在观察方向上所能看到的形体的最大外轮廓线 面：有限非零的区域，有一个外环和若干个内环界定范围 环：由有序有向边组成的封闭边界 面上沿环前进，左侧面内 边：两个邻面或多个邻面的交界 点：不允许孤立点 拓扑关系表示：相邻性，包含性 实体的造型 多边形表面表示：用一组包围物体内部的表面多边形描述边界
多边形边表表示：顶点表，边表，面表 多边形平面方程：$Ax+By+Cz+D=0$ 多边形表面方向：从里向外以右手系逆时针方向选择 $V_1,V_2,V_3$，$N=(V_2-V_1)\times(V_3-V_1)$ 空间分割表示：实体被分割表示为互不相交的粘合在一起的体素
空间位置枚举表示法：单一立方体 八叉树表示法：每个结点为立方体，根据 Full, Partial, Empty 继续划分 Partial 单元分解表示法：不同类型基本体素粘合 扫掠几何/推移表示 (sweep representation)
广义平移 sweep：允许二维区域大小变换，轨道可以不垂直与二维区域所在平面 旋转 sweep 广义 sweep：允许带推移物体在推移过程中任意变换 正则集合运算困难 边界表示：描述实体边界描述实体</description>
    </item>
    
  </channel>
</rss>
