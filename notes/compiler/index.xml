<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[S] 编译原理 Compiler on Zangwei</title>
    <link>https://zhengzangw.com/notes/compiler/</link>
    <description>Recent content in [S] 编译原理 Compiler on Zangwei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zhengzangw at gmail.com (Zangwei Zheng)</managingEditor>
    <webMaster>zhengzangw at gmail.com (Zangwei Zheng)</webMaster>
    <lastBuildDate>Tue, 18 Feb 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengzangw.com/notes/compiler/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://zhengzangw.com/notes/compiler/1-indtrodution/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/1-indtrodution/</guid>
      <description>编译器 分析部分（前端）+ 综合部分（后端） 趟（Pass）：每趟读入一个输入文件，产生一个输出文件 字符流 -&amp;gt; (词法分析器) -&amp;gt; 符号流 词法分析/扫描 (Lexical analysis/scanning)：读入字符流，输出词素（Lexeme）&amp;lt;token-name, attribute-value&amp;gt; 符号流 -&amp;gt; (语法分析) -&amp;gt; 语法树 语法分析/解析 (Syntax analysis/parsing)：根据此番单元的第一个分量建立树型中间表示（Syntax tree） 语法树 -&amp;gt; (语义分析) -&amp;gt; 语法树 语义分析：检查源程序是否满足语言定义的语义约束；同时收集类型信息 符号表管理：记录源程序中使用的变量的名字，手机各种属性 语法树 -&amp;gt; (中间代码生成器) -&amp;gt; 中间表示形式 中间代码生成：生成类机器语言的中间表示；三地址代码（每个指令最多包括三个变量） 中间表示形式 -&amp;gt; (机器无关代码优化器) -&amp;gt; 中间表示形式 中间代码优化：通过中间代码分析，优化 中间表示形式 -&amp;gt; (代码生成器) -&amp;gt; 目标机器语言 代码生成：将中间表示形式映射到目标语言 目标机器语言 -&amp;gt; (机器相关代码优化器) -&amp;gt; 目标机器语言 程序设计语言发展历程 历程 第一代：机器语言 第二代：汇编语言（宏命令） 第三代：Fortran, Cobol, Lisp, C, C++ 第四代：特定应用语言：NOMAD, SQL, Postscript 第五代：基于逻辑和约束的语义 Prolog OPS5 强制式语言：指明如何完成 声明式语言：指明要完成哪些计算 静态：支持编译器静态决定问题 动态：只允许程序运行时做出决定 环境：从名字到存储位置的映射 状态：从存储位置到它们值的映射 文法 短语结构文法（grammer）$G=(N,T,P,\sigma)$（非终结符，终结符，产生式，开始符号） 0 型文法：$\alpha\rightarrow\beta,\alpha\in(N\cup T)^$ 且至少有一个终结符，$\beta\in(N\cup T)^$ 短语文法 递归可枚举集 图灵机 1 型文法：$\alpha\rightarrow\beta,|\beta|\geq|\alpha|$ 上下文有关文法 线性有界自动机 2 型文法：$\alpha\rightarrow\beta,\alpha\notin(T)^*$ 上下文无关文法 BNF 范式 3 型文法：$A\rightarrow \alpha |\alpha B$（右线性或左线性） 正规文法 有限状态自动机 正则表达式 </description>
    </item>
    
    <item>
      <title>Lexical Analysis</title>
      <link>https://zhengzangw.com/notes/compiler/2-lexical-analysis/</link>
      <pubDate>Tue, 18 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/2-lexical-analysis/</guid>
      <description>词法分析器的作用 读入字符流，组成词素，输出词法单元 过滤空白、换行、制表符、注释 将词素添加到符号表 逻辑上独立于语法分析，但通常和语法分析处于同一趟 独立词法分析 简化设计 提高编译器效率 增强编译器的可移植性 概念 词法单元 Token：&amp;lt;单元名，属性&amp;gt; 模式 Pattern：描述了一类 Token 可能具有的形式 词素 Lexeme：源程序中的字符序列 词法单元的规约（正则表达式） 概念 字符表：一个有穷符号的集合 串：符号的有穷序列 语言：给定字母表上串的可数集合 前缀，后缀，子串 连接：$xy$ 指数运算：$x^n$ 语言运算 $L\cup M$ $LM$ $L^*=\cup_{i=0}^\infty L^i$ $L^+=\cup_{i=1}^\infty L^i$ 正则表达式 基本部分 $L(\epsilon)={\epsilon}$ $L(a)={a}$ 归纳部分 $L((r)|(s))=L(r)\cup L(s)$ $L((r)(s))=L(r)L(s)$ $L((r)^)=L(r)^$ $L((r))=L(r)$ 运算优先级 $*$ 连接 $|$ 扩展 $r+$ = $rr^*$ $r?$ = $\epsilon|r$ $[a_1\cdots a_n]$ = $a_1|a_2\cdots|a_n$ 正则集合：可以用正则表达式定义的语言 正则定义：$d_1\rightarrow r_1$ 不能重复定义，不能与字母表重复 词法分析的识别（状态转换图） Transition diagram State: 识别词素时可能出现的情况 状态是已处理部分的总结 开始状态 终止状态（带星号表示回退一个符号） Edge：一个符号或多个符号 保留字和标识符的处理 法一：在符号表中先填保留字 法二：建立高优先级的保留字 构造词法分析器 State 记录当前状态 switch 跳转状态 if 对比边 失败 fail() 接受状态返回词法单元（*标记回退 forward 指针） 词法分析器生成工具及设计 Lex/Flex 编译器：lex.</description>
    </item>
    
    <item>
      <title>语法分析</title>
      <link>https://zhengzangw.com/notes/compiler/3-syntax-analysis/</link>
      <pubDate>Thu, 27 Feb 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/3-syntax-analysis/</guid>
      <description>上下文无关文法 语法描述 上下文无关文法 CFG BNF 上下文无关文法 终结符号 非终结符号 开始符号 产生式 推导：$A\rightarrow\gamma$，则 $\alpha A\beta\Rightarrow \alpha\gamma\beta$ 最左推导：$\alpha$ 中不包含非终结符 $\overset{*}{\Rightarrow}_{\text{lm}}$ 零步或多步推导：$\overset{*}{\Rightarrow}$ 一步或多步推导：$\overset{+}{\Rightarrow}$ 句型 $\alpha$：$S\overset{*}{\Rightarrow} \alpha$ 句子：不包含非终结符号的句型 语言：$L(G)={\omega|S\overset{*}{\Rightarrow}\omega}$ CFG 处理 二义性：如果一个文法可以为某个句子生成多棵语法分析数，则该文法二义
设计文法
消除二义性：无较好方法；优先级，结合性消除 消除左递归：$A\overset{+}{\Rightarrow} A\alpha$ 立即左递归：$A\rightarrow A\alpha$ 提取左公因子 消除左递归
立即左递归的消除
如果有 $A\rightarrow A\alpha_1|\cdots|A\alpha_m|\beta_1|\cdots|\beta_n$
变换为 $A\rightarrow \beta_1 A&amp;rsquo;|\cdots|\beta_n A&amp;rsquo;$ 和 $A&amp;rsquo;\rightarrow \alpha_1 A&amp;rsquo;|\cdots|\alpha_m A&amp;rsquo;|\epsilon$
左递归消除算法
输入：无环和$\epsilon$产生式的文法 $G$ 输出：等价的无左递归的文法 算法：非终结符号排序 $A_1,\cdots,A_n$
for i = 1 to n do{ for j = i - 1 do { 将 Ai -&amp;gt; Aj t 替换为 Ai -&amp;gt; s1 t | s2 t | .</description>
    </item>
    
    <item>
      <title>Syntax-Directed Definition and Translation</title>
      <link>https://zhengzangw.com/notes/compiler/4-syntax-directed-definition-and-translation/</link>
      <pubDate>Tue, 17 Mar 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/4-syntax-directed-definition-and-translation/</guid>
      <description>属性规则 语义描述 上下文相关文法：过于复杂 属性文法：上下文无关文法和属性规则的结合 综合属性(SA)：通过 $N$ 的子结点或 $N$ 本身的属性值定义 继承属性(IA)：依赖于父节点，本身和兄弟结点的属性值 终结符号无继承属性 语义规则的副作用：影响其它属性的求值 SDD 语法制导定义(SDD)：将文法符号和某些属性关联，通过语义规则来描述如何计算属性值 属性文法：没有副作用的 SDD 适用于自顶向下分析的 SDD S 属性的 SDD：可以在语法分析过程中一起计算 L 属性的 SDD L 属性：只拥有 综合属性 或继承属性，且 $A\rightarrow X_1X_2\cdots X_n$ 中计算 $X_i.a$ 的规则只用 $A$ 的继承属性 或 $X_i$ 左边的文法符号 $X_j$ 的继承属性或综合属性 注释分析树 依赖图：描述某棵特定的分析树上各个属性之间的信息流 如果依赖图中有环，则无法计算 具有受控副作用的语义规则 抽象语法树 每个结点代表一个语法结构，对应于运算符 结点的每个子节点代表其子结构，对应于运算分量 表示这些子结构按照特定的方式组成了较大的结构 SDT 语义动作：程序片段 语法制导翻译(SDT)：在产生式体加入语义动作的上下文无关文法 建立语法分析树 将语义动作看做为虚拟结点 从左到右深度优先遍历，在访问虚拟结点是执行相应语义动作 用 SDT 实现 SDD，在分析过程中可以实现的有 基本文法为 LR, SDD 为 S 属性 基本文法为 LL, SDD 为 L 属性 后缀 SDT：所有动作都在产生式最右端 文法可以 LR 分析, SDD 为 S 属性的 语法分析栈的实现 L 属性对应的 SDT 消除左递归时 SDT 的转换 如果动作不涉及属性值，将动作当做终结符号处理 否则，将语义动作放到相应产生式的适当位置 $(A\rightarrow X_1X_2\cdots X_n)$： 计算 $X_i$ 的继承属性的动作插入到产生式体中 $X_i$ 的左边 计算产生头 $A$ 综合属性的动作放在最右边 边扫描边生成属性 条件 存在一个主属性为综合属性 主属性通过产生式体中各非终结符号的主属性连接得到 非终结符号的主属性的连接顺序与它们在产生式体中的顺序相同 </description>
    </item>
    
    <item>
      <title>中间代码生成</title>
      <link>https://zhengzangw.com/notes/compiler/5-%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</link>
      <pubDate>Thu, 02 Apr 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/5-%E4%B8%AD%E9%97%B4%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</guid>
      <description>三地址代码 指令集合 运算/赋值：x=y op z, x=op z 复制：x=y 无条件转移指令：goto L 条件转移指令：if x goto L, if False x goto L 条件转移指令：if x relop y goto L 过程调用/返回：param $x_i$, call p,n 带下标的复制：x=y[i], x[i]=y 地址/指针赋值指令：x=&amp;amp;y, x=*y, *x=y 四元式：op arg1 arg2 result 单目运算符：no arg2 param 运算不使用 arg2, result 转移目标：result 三元式：使用三元式的位置来引用三元式的运算结果 简接三元式：包含一个指向三元式的指针的列表 静态单赋值（SSA）：所有赋值都是针对不同名的变量 回填 </description>
    </item>
    
    <item>
      <title>运行时刻环境</title>
      <link>https://zhengzangw.com/notes/compiler/6-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%BB%E7%8E%AF%E5%A2%83/</link>
      <pubDate>Thu, 23 Apr 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/6-%E8%BF%90%E8%A1%8C%E6%97%B6%E5%88%BB%E7%8E%AF%E5%A2%83/</guid>
      <description>控制栈 实在参数 返回值 控制链 访问链 保存的机器状态 局部数据 临时变量 垃圾回收 基于引用计数的垃圾回收（存在循环垃圾） 基于跟踪的垃圾回收 标记-清扫式垃圾回收 标记并压缩垃圾回收 拷贝垃圾回收 </description>
    </item>
    
    <item>
      <title>代码生成</title>
      <link>https://zhengzangw.com/notes/compiler/7-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</link>
      <pubDate>Thu, 30 Apr 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/7-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</guid>
      <description>目标语言 代码生成器的任务
指令选择 寄存器分配和指派 指令排序 地址
静态分配
call callee
ST callee.staticArea, #here + 20 BR callee.codeArea return
BR *callee.staticArea name
LD 112, #0 LD 12(SP), #0 栈式分配
call callee
ADD SP, SP, #caller.recordSize ST 0(SP), #here + 16 BR callee.codeArea return
BR *0(SP) SUB SP, SP, #caller.recordSize 基本块与流图 确定 leader 第一个三地址指令 任一个跳转指令 任一个跳转目标指令 活跃性 开始时非临时变量活跃 反向扫描 i: x = y + z x: 不活跃（之前的值不使用），无后续使用 y,z: 活跃，指明下一次使用设置为语句 i 循环定义 存在唯一入口结点，前驱在循环之外，到达其余结点路径必然经过该结点 DAG DAG 图构造 为基本块中每个出现的变量建立结点 x = y op z：建立指令结点 N，标号 op，令 x 和 N 关联 x = y：假设 y 关联 N，则 x 关联 N 消除死代码：在 DAG 图上消除没有附加活跃变量的根节点 数组引用 x=a[i] 对应于 =[] 的结点 a[j]=y 对应于 []= 的结点 指针赋值、过程调用：无法消除死码 重组基本块：如果两个指令间互相影响，则其顺序不该改变 代码生成器 尽可能把值保留在寄存器中 寄存器描述符：寄存器存放了哪些变量 地址描述符：各个变量的当前值存放在哪些位置 getReg(I): 根据寄存器描述符合地址描述符等数据流信息，为指令 I 选择最佳的寄存器 减少 LD/ST 指令 寄存器分配 v 的地址描述符可以在别的地方找到 v 就是计算结果变量 v 在之后不会被使用 生成保存指令 ST v, R 并修改地址描述符 优化 窥孔优化:使用滑动窗口检查目标指令 冗余指令消除 控制流优化 代数化简/强度消减 机器特有指令使用 全局寄存器分配 树重写实现指令选择 重写规则：replacement &amp;lt;- template { action } gcc 优化</description>
    </item>
    
    <item>
      <title>机器无关优化</title>
      <link>https://zhengzangw.com/notes/compiler/8-%E6%9C%BA%E5%99%A8%E6%97%A0%E5%85%B3%E4%BC%98%E5%8C%96/</link>
      <pubDate>Tue, 28 Apr 2020 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/compiler/8-%E6%9C%BA%E5%99%A8%E6%97%A0%E5%85%B3%E4%BC%98%E5%8C%96/</guid>
      <description>优化 公共子表达式消除 复制传播 死代码消除 常量折叠 数据流分析 </description>
    </item>
    
  </channel>
</rss>
