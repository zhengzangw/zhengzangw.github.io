<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[S] 数据库 Database on Zangwei</title>
    <link>https://zhengzangw.com/notes/database/</link>
    <description>Recent content in [S] 数据库 Database on Zangwei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zhengzangw at gmail.com (Zangwei Zheng)</managingEditor>
    <webMaster>zhengzangw at gmail.com (Zangwei Zheng)</webMaster>
    <lastBuildDate>Wed, 16 Jan 2019 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengzangw.com/notes/database/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>1-概述</title>
      <link>https://zhengzangw.com/notes/database/1-%E6%A6%82%E8%BF%B0/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/1-%E6%A6%82%E8%BF%B0/</guid>
      <description>基本概念    Term      数据库(DB) 长期存储在计算机内、有组织的、大量的、共享的数据集合   数据库管理系统(DBMS) 位于用户与操作系统（OS）之间的一层数据管理软件，为用户或应用程序提供访问数据库的方法和接口   数据库管理员(DBA)    数据库系统(DBS) DB+DBMS+DBA+软件平台+硬件平台   数据库技术 研究数据库的结构、存储、设计、管理和使用的一门软件学科   data &amp;amp; infomation 数据是信息的载体，信息则是数据的内涵   数据库应用系统(DBAS) DBS+应用软件+UI+用户 利用数据库系统作应用开发所构成的集成化的独立运行系统       DBMS 功能      数据组织 数据模式定义，数据存储的物理构作   数据操纵 查询、插入、修改和删除   数据维护 完整性、安全性定义与检查   数据控制与保护 并发控制与故障恢复   数据服务 内置函数   数据字典      数据库用户  End users  Casual users(终端查询用户) Naive users(应用程序的使用者)   Application programmers DBA   sub languange  SQL 语言  DDL(Data Definition Language)：数据的模式定义域数据的物理存取构作 DML(Data Manipulation Language): 查删增改等 DCL(Data Control Language): 完整性、安全性定义与检查   使用方式  交互式命令语言 宿主型语言     Architecture of Database System  Two-tier Architechture (两层 C/S)  DB 和 DBMS 运行在数据库服务器中，DBAS 运行在客户机中   三层 C/S  DBAS 运行在应用服务器中(Web 服务器)      DBS 特点  集成性 integration  集多种应用数据于一体，采用统一的数据结构 全局统一的数据模式   高共享性  供多个应用程序使用 在DBS基础上开发新应用程序   低冗余性 独立性  物理独立性：数据的物理结构（包括存储结构、存取方式等）的改变，不影响数据库的逻辑结构，从而不致引起应用程序的变化 逻辑独立性：数据库总体逻辑结构的改变，如修改数据模式、增加新的数据类型、改变数据间联系等，不需要相应修改应用程序   数据的统一管理与控制  完整性检查 安全性保护 并发控制 故障恢复    发展历史 发展历史图</description>
    </item>
    
    <item>
      <title>2-数据模型</title>
      <link>https://zhengzangw.com/notes/database/2-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/2-%E6%95%B0%E6%8D%AE%E6%A8%A1%E5%9E%8B/</guid>
      <description>数据模型的定义  数据模型：数据特征的抽象  数据结构（数据模式） 数据操作 数据约束   四个世界  现实世界 概念世界 信息世界 计算机世界    概念模型 实体联系模型(E-R)  实体(Entity)：实体名+实体型  实体集：具有共性的实体所构成的集合，实体集名+实体型+关键字 关键字：可用于区分同一个实体集中不同实体的 ‘最小属性集合’   属性(Attribute)：属性名+域  域：某一属性可取的值的集合 实体型：所有属性的属性名 实体值：所有属性上的取值所构成的属性值的集合 具有共性的实体：实体型相同的实体   联系：联系名+属性+函数对应关系  1:1, 1:m, m:n 二元联系，多元联系，单个实体集内部联系   E-R 图  实体集：长方形 属性：椭圆 联系：菱形 连接：无向线段  实体集与属性 联系与属性 实体集与联系     E-R 模型设计  实体 or 属性 实体 or 联系 二元 or 三元 Event 可抽象为实体    EE-R  IS-A 联系：超集-子集关系，单向箭头  继承性，传递性 覆盖约束  所有子实体集的并集等价于超实体集 一个实体至少隶属于某一个子实体集   不相交约束  任意两个子实体集都是互不相交的 一个实体至多隶属于某一个子实体集     Weak Entity：需要依赖其它实体而存在的实体  多对一关系：弱实体到联系有向箭头   属性划分  Identifier/key/candidate key Descriptor composite attribute：属性到属性无向线段 multi-value attribute：双实线   属性基数 $(x,y)$  $x$: 是否必选 1/0 $y$: 是否单值 1/N   实体在联系中的参与基数 card=(min-card, max-card)  min-card 1/0: 1 if all dots in the entity E have AT LEAST one line coming out  1: mandatory participation 0: optional participation   max-card 1/N: 1 if all dots in the entity E have AT MOST one line coming out  1: single-valued N: multi-valued      面向对象模型(OO)  对象(Object)  OID 对象标识符 静态特性/属性  多值   动态特性/方法/操作   类  具有相同属性方法的对象集合 类对象 元类：所有类对象的集合 实例：类中的对象 IS-A, IS-PART-OF   消息：Type A.</description>
    </item>
    
    <item>
      <title>3-关系数据库系统</title>
      <link>https://zhengzangw.com/notes/database/3-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/3-%E5%85%B3%E7%B3%BB%E6%95%B0%E6%8D%AE%E5%BA%93%E7%B3%BB%E7%BB%9F/</guid>
      <description>衡量准则 完全关系型，基本关系型，半关系型
 信息准则：信息能在逻辑一级唯一地用“表”中的值显示表示 确保访问准则：逻辑方式依靠表名、关键字名与列名的组合来访问数据库汇总的每一个原子数据 空值的关系处理准则：处理空值的能力 基于资源管理的动态联机目录：数据字典与用户数据具有相同的表示形式与操作方式 统一易用的数据子语言：至少有一种数据子语言支持：数据定义，视图定义，数据操控空，完整性约束，授权机制，事务处理能力 视图更新准则：通过视图不仅可以查询，还可以执行对数据的增、删、改等操作 高级的插入、删除及修改操作：一条命令可以操作多个元组 物理数据独立性 逻辑数据独立性 数据完整性准则 分布独立性：数据分布的改变不影响原有的应用程序 无损害原则：对提供低级数据子语言的要求  关系模型 由关系构建的模型
关系数据结构  二维表  Frame：表框架有 $n$ 个 Attribute 组成  表的元数：$n$ Domain：属性的取值范围   Tuple：由 $n$ 个元组分量组成  表的基数：$m$     关系：满足以下性质的的二维表  First Normal Form Rule  元组分量原子性   Access Rows by Content Only Rule  元组次序无关 属性次序无关   The Unique Row Rule  元组唯一   元组个数有限 属性名唯一性 分量值域同一性   关系框架：关系名+所有属性名 $R(A_1,A_2,\cdots,A_n)$ 键  Superkey: a set of columns that has the uniqueness property Key: a minimal superkey Foreign Key: 表 A 中的属性集 F 是表 B 的键，则 F 为表 A 的外键  A 可以等于 B A：引用表，B：被应用表         关系模型 二维表     Relation Table   Attribute Column   Tuple Row   Schema Table Heading    关系操纵  数据操纵功能  数据查询  单张表：纵向定位+横向定位 两张表：先将两张表合一 多张表：逐步合一   数据插入 数据删除 数据修改   基本操作模型  元组选择 属性指定 关系合并 元组插入 元组删除   空值处理  算术运算中有空值，结果为空 逻辑运算中有空值，结果为假 统计计算中，定义对空集和空值的处理方法  空值可以不统计 SUM AVG MAX MIN COUNT 空集结果为空 SUM AVG MAX MIN 空集结果为 0 COUNT      数据约束  实体完整性约束：关系的主键中不允许有空值 参照完整性约束：外键要么取空值，要么是被引用表中当前存在的某元组上的主键值 用户定义的完整性  关系代数 集合在 $(\pi,\sigma,\times,\cup,-)$ 下的代数系统</description>
    </item>
    
    <item>
      <title>4-规范化理论</title>
      <link>https://zhengzangw.com/notes/database/4-%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/4-%E8%A7%84%E8%8C%83%E5%8C%96%E7%90%86%E8%AE%BA/</guid>
      <description>解决如何评价关系模式设计的好坏和如何设计性能良好的关系模式的问题
 关系设计模式：同一个关系数据库系统可以有多种关系模式设计方案  好方案：既有合理的数据冗余度，又没有插入和删除等操作异常现象   关系数据模型设计方法：建模(E-R model)，转换(set of tables)，规范化  函数依赖（FD,Functional Dependency） 给定关系 $R$，$X,Y$ 是 $R$ 两个属性子集，在关系 $R$ 中，每一个 $X$ 值都有唯一的一个 $Y$ 值与之对应
 $Y$ 函数依赖 $X$  $X$ 函数决定 $Y$($X\rightarrow Y$) 关系 $R$ 满足函数依赖 $X\rightarrow Y$ 决定因素：$X$ 依赖因素：$Y$   只能证否，不能证明 平凡函数依赖： $Y\not\subseteq X$ 完全函数依赖 $X\overset{f}{\rightarrow} Y$：$X\rightarrow Y,\forall X&#39;\subsetneq X,X&#39;\not\rightarrow Y$  部分函数依赖 $X\overset{p}{\rightarrow}Y$   传递函数依赖：$X\rightarrow Y,Y\not\rightarrow X,Y\rightarrow Z$, 则 $Z$ 传递函数依赖于 $X$ Armstrong 公理系统：寻找所有函数依赖  基本规则  Reflexivity: $Y\subset X\Rightarrow X\rightarrow Y$ Augmentation: $X\rightarrow Y\Rightarrow X\cup Z\rightarrow Y\cup Z$ Transtivity: $X\rightarrow Y,Y\rightarrow Z\Rightarrow X\rightarrow Z$   扩充规则  Union: $X\rightarrow Y\cup Z\Rightarrow X\rightarrow Y,X\rightarrow Z$ Decomposition: $X\rightarrow Y,X\rightarrow Z\Rightarrow X\rightarrow Y\cup Z$ Pseudo transitivity: $X\rightarrow Y,W\cup Y\rightarrow Z\Rightarrow W\cup X\rightarrow Z$   逻辑蕴含：$F\vDash X\rightarrow Y,F$ 为一个函数依赖集 函数依赖集的闭包：$F^+={X\rightarrow Y|F\vDash X\rightarrow Y}$   关键字（码,key）：$R(U,F),K\subset U,K$ 完全函数决定 $U$  主属性集：$R$ 的所有关键字中的属性构成的集合 非主属性集   属性集 $X$ 的闭包：$X_F^+={A|F\vDash X\rightarrow A}$  计算闭包  while $X$ changes  for each $Y\rightarrow Z\in F$  if $Y\subset X,X=X\cup Z$       关键字 $K$  $K_F^+=U$ $\forall Z\subsetneq K,Z_F^+\neq U$     计算关键字  法一：$F\vDash K\overset{f}{\rightarrow} U$ 法二  $K=U$ for $A\in K$  if $(K-A)_F^+$ contains all attribute then $K=K-A$   优化：最小函数依赖集只在左边出现过的属性是主属性，只在右边出现过的属性为非主属性     函数依赖集的等价：$F_1^+=F_2^+$ 最小函数依赖集（最小覆盖）  判定方法：对于每个关系 $X\rightarrow A$ 需满足以下三条  $A$ 为单个属性 $(F-{X\rightarrow A}))^+\neq F^+$ $\forall Y\subset X,(F-{X\rightarrow X,Y\rightarrow A})^+\neq F^+$   计算方法  $G=F$，将 $G$ 中每个 $X\rightarrow(A_1,\cdots,A_n)$ 的函数依赖替换为 $X\rightarrow A_1,\cdots,X\rightarrow A_n$ 消除部分函数依赖：对每个函数依赖 $X\rightarrow A$  对 $X$ 中每个属性 $B$  若 $A\in(X-B)_G^+$, 则用 $(X-B)\rightarrow A$ 替换 $X\rightarrow A$     消除冗余函数依赖：对每个函数依赖 $X\rightarrow A$  若 $A\in X_N^+,N=G-{X\rightarrow A}$ 则从 $G$ 中删去 $X\rightarrow A$   将 $X\rightarrow A_1,\cdots,X\rightarrow A_n$ 合并为 $X\rightarrow(A_1,\cdots,A_n)$      多值依赖 (MVD)  $X\rightarrow\rightarrow Y$: $X$ 与 $Y$ 的一组值对应，且 $Y$ 的这组值与 $U-X-Y$ 无关 非平凡的多值依赖：$U-X-Y\neq\emptyset$ $X\rightarrow\rightarrow Y\Rightarrow X\rightarrow\rightarrow (U-X-Y)$ $X\rightarrow Y\Rightarrow X\rightarrow\rightarrow Y$ $X\rightarrow\rightarrow Y,W\supseteq Z\Rightarrow W\cup X\rightarrow\rightarrow Y\cup Z$ $X\rightarrow\rightarrow Y,Y\rightarrow\rightarrow Z \Rightarrow X\rightarrow\rightarrow(Z-Y)$ $X\rightarrow\rightarrow Y,W\cap Y=\emptyset,W\rightarrow Z,Y\subseteq Z\Rightarrow X\rightarrow Z$  范式  范式：满足允许存在的函数依赖的要求的关系集合 第一范式 $R\in$ 1NF：每个属性级都是不可分割的数据量  每个关系必须满足   第二范式 $R\in$ 2NF: $R\in$ 1NF 且每个非主属性完全依赖于关键字  判断方法  确定主属性集合非主属性级 判断每个非主属性和关键字之间是否满足 2NF     第三范式 $R\in$ 3NF: $R\in$ 2NF 且每个非主属性不传递函数依赖于关键字 BCNF 范式：$R\in$ 1NF，若 $X\rightarrow Y$ 则 $X$ 必含有该关系模式的关键字  $R\in$ BCNF 则 $R\in$ 3NF   第四范式 $R\in$ 4NF: $X\rightarrow\rightarrow Y$ 是非平凡多值依赖，则 $X$ 必含有关键字  $X\in$ BCNF    模式分解  模式分解：将属性集合分解构成若干小的关系模式  找出不满足范式要求的函数依赖关系 $X\overset{f}{\rightarrow} Y$ 分解为  $R_1=(X\cup Y,{X\rightarrow Y})$ $R_2=(\text{Head}(R)-Y, {A\rightarrow B|A\rightarrow B\in F^+,(A\cup B)\subseteq \text{Head}(R_2)})$   对子关系重复进行 合并具有相同关键字的子关系模式   无损联结性：分解后原关系中的信息不会被丢失 $R=R_1\Join R_2$  $R$ 的分解为 $\rho={R_1,R_2}$，$F$ 为 $R$ 所满足的函数依赖集合，分解 $\rho$ 具有无损联结性的充分必要条件是：$R_1\cap R_2\rightarrow (R_1-R_2)$ 或 $R_1\cap R_2\rightarrow (R_2-R_1)$   依赖保持性：原有的函数依赖在分解后的关系模式上依然存在 $F^+=(F_1\cup F_2)^+$ 在必须同时满足无损联接性和依赖保持性的要求下，一个关系模式最高可以被分解到满足第三范式  </description>
    </item>
    
    <item>
      <title>5-安全性与完整性</title>
      <link>https://zhengzangw.com/notes/database/5-%E5%AE%89%E5%85%A8%E6%80%A7%E4%B8%8E%E5%AE%8C%E6%95%B4%E6%80%A7/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/5-%E5%AE%89%E5%85%A8%E6%80%A7%E4%B8%8E%E5%AE%8C%E6%95%B4%E6%80%A7/</guid>
      <description>安全性保护 (security)  防止非法使用数据库  要求用户通过规定的访问途径 要求按照规定的访问规则       Term      安全数据库（可信数据库） 适应网络环境下安全要求级别的数据库   可信计算基（TCB） 为实现数据库安全所采用的所有实施策略与机制的集合   主体 数据的访问者   客体 数据库中的数据   身份标识与鉴别 每个主体标识自己的标识符和访问口令   自主访问控制（DAC） 基于存取矩阵(HRU)的安全控制模型   存取权限    强制访问控制（MAC） 通过无法回避的存取限制来防止各种攻击   数据完整性 防止非法插入，删除，修改等影响数据完整性的操作   隐蔽通道 非正规的，不受 TCB 控制的访问通道   审计 跟踪用户对数据的访问操作   访问监控器 独立的机构，TCB 在网络中的实现     安全标准  1985 TCSEC 国际标准(ISO 15408) CC V2.</description>
    </item>
    
    <item>
      <title>6-事务处理</title>
      <link>https://zhengzangw.com/notes/database/6-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/6-%E4%BA%8B%E5%8A%A1%E5%A4%84%E7%90%86/</guid>
      <description>事务  事务：由某个用户执行的一个不能够被打断的对数据库的操作序列 影响因素  concurrency 并发控制 abort crash 故障恢复   事务的四个性质：ACID  Atomicity：要么全部发生，要么都不发生 Consistency：满足数据约束 Isolation：并发事务的可串行化 Durability：数据不丢失    事务控制   事务控制语句
  begin transaction
数据定义命令(DDL)：每条数据定义命令为一个单独的事务
自动提交方式(set autocommit on|off)：每条访问命令为单独的事务
数据操纵命令(DML)
  commit transaction
  rollback transaction
savepoint
    事务控制命令(DCL)
 set autocommit on|off set transaction readonly|readwrite set transaction isolation level readuncomitted|readcomitted|readrepeatable|serializable    并发错误
 更新丢失：对多个事务并发修改同一个数据对象的情况未加控制 脏读：一个事务读取到了另外一个事务没有提交的数据 不可重复读：在两次连续的读操作间插入了另一个事务的写操作 幻象读：在两次连续的查询操作间插入了另一个事务的插入操作       隔离级别 Dirty Read Non-repeatable Read Phantom Read     Read uncommited Possible Possible Possible   Read commited  Possible Possible   Repeatable read   Possible   Serializable       事务的语句组成  事务控制操纵  事务开始：START T0 提交事务：COMMIT T0 回退事务：ABORT T0   数据访问操纵  INPUT(A) OUTPUT(A) READ(A,t) WRITE(A,t)    并发控制 实现并发事务的可串行化调度</description>
    </item>
    
    <item>
      <title>7-数据库的物理组织</title>
      <link>https://zhengzangw.com/notes/database/7-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%84%E7%BB%87/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/7-%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E7%89%A9%E7%90%86%E7%BB%84%E7%BB%87/</guid>
      <description>物理组织  常用的磁盘块分配方式  连续分配法 链接分配法 索引分配法 集簇分配法   数据分类  数据主体与辅助数据 数据字典：数据的描述信息 数据间的联系信息 数据存储路径信息 其它信息：日志信息，用户信息，审计信息   文件记录组织  数据文件：储存关系表中元组的记录式文件 堆文件组织 顺序文件组织：按照某个属性的取值进行排序构成的数据文件  主关键字：$O(\log n)$   散列文件组织 聚集文件组织    索引技术  索引关键字：查询条件的属性 索引项：索引关键字-元组指针 索引文件：与某个数据文件相关的所有索引项组成的文件 稠密索引：数据文件中每条记录在索引文件中都存在一个对应索引项  磁盘I/O时间小 索引关键字排序：加速 可在内存中操作   稀疏索引：数据文件为顺序文件，为每个磁盘块设计一个索引项 多级索引：在索引上建立稀疏索引 重复键值顺序文件稠密索引  为每个索引关键字定义一个索引项（索引文件中索引关键字唯一） 读取直到不为 $K$   重复键值顺序文件稀疏索引  为每个磁盘块定义索引项，关键字值为磁盘块中第一条记录的关键字值（关键字不唯一）   重复键值非顺序文件索引  稠密索引指向记录指针桶   多维索引：根据多个属性值的组合来建立的索引文件  B/B+树  B+树性质  平衡性 过半性 顺序性 自适应性   B+树的查找 B+树的区间查找 B+树的插入  叶节点的分裂 树节点的分裂   B+树的删除 B树：索引关键字可以出现在B树任意一个结点中  扇出（一个结点可以拥有的最大子结点数目）小    散列技术  $h:K\rightarrow B$: 将项值集合映射到桶地址集合 扩展散列  增加溢出页 重组（代价大） 使用仅储存桶指针的目录数组，翻倍目录数组  全局位深度 局部位深度     位图索引：对于关系上的属性的每个可能取值，bit_v[i]=1 if 取值为 $v_i$  </description>
    </item>
    
    <item>
      <title>8-数据交换</title>
      <link>https://zhengzangw.com/notes/database/8-%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/8-%E6%95%B0%E6%8D%AE%E4%BA%A4%E6%8D%A2/</guid>
      <description>初级阶段：交换方式（命令执行方式） 中级阶段：嵌入式方式，自含方式（可编程SQL），调用层方式 近期方式：Web方式  数据交换的管理  会话管理  数据客体模式设定（网络环境，目录层，模式层） 语言模式设定（字符集） 时间模式设定（时区） 标识符设定   连接管理  连接语句 connect to &amp;lt;连接目标&amp;gt; 断开连接 disconnect &amp;lt;断开对象&amp;gt;   游标管理  --declare EXEC SQL DECLARE agent_dollars CURSOR FOR select aid, sum(dollars) from orders where cid = :cust_id --:cust_id is stored in host variable  group by aid FOR READ ONLY; --open exec sql open agent_dollars --fetch exec sql whenever not found goto finish; while (TRUE){ exec sql fetch agent_dollars into :agent_id, :dollar_sum; printf(&amp;#34;%s %11.</description>
    </item>
    
    <item>
      <title>9-数据库设计</title>
      <link>https://zhengzangw.com/notes/database/9-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</link>
      <pubDate>Sun, 26 May 2019 00:00:00 +0000</pubDate>
      <author>zhengzangw at gmail.com (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/database/9-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%AE%BE%E8%AE%A1/</guid>
      <description>数据库设计概述  数据库设计：根据用户需求(数据需求，处理需求)和平台约束(硬件，操作系统和DBMS)设计数据模式 数据库设计的生命周期  需求分析（需求分析说明书） 概念设计（概念数据模型） 逻辑设计（逻辑数据模型） 物理设计（数据库内模式） 编码测试运行，迭代    需求分析  Things Attributes of Things Relationship among Things  概念设计  工具：E-R模型，EE-R模型，面向对象模型 设计过程  用户分解：将用户分为功能相对独立的若干组 视图设计：针对每个用户设计其数据视图 视图集成  等同：多个数据对象具有相同语义 聚合：数据对象间的一种组成关系 抽取：不同实体中的相同属性提取成一个新的实体，并构成具有继承关系的结构   视图修改  命名冲突 概念冲突 域冲突 约束冲突      逻辑设计 将 EE-R 转换为 DBMS 支持的逻辑数据模型（转换为关系数据库模式）
 命名与属性域的处理  在同一个数据库模式中，关系名具有唯一性 在同一个关系模式中，属性名具有唯一性 根据DBMS的选型进行必要的数据类型转换   非原子属性处理  集合属性：原有关系的一个元组将被纵向展开成多个元组 元组属性：将一个元组属性横向展开成多个属性   联系的特殊转换  一个联系可以被转换成一个关系 联系也可被归并到相关联的实体所对应的关系模式中去 根据 1:1,1:n,m:n 转换为 1/2/3 个关系   继承的转换  每个实体集都转换为一个关系 只有最底层的叶子结点才会被转换为关系，并从其所有超实体集中继承属性 被转换为单个关系，其中含有所有实体集中的属性。   规范化：至少满足 3NF RDBMS 性能调整  逆规范化：减少连接运算次数 关系的分割  水平分割：将一个关系的元组集合划分为若干个不相交的子集，每个子集对应一个子关系模式 将一个关系模式纵向分解成若干个子关系模式   尽量使用快照   约束条件设置  物理设计  存储方式的设计  索引  在主关键字和外关键字上建立索引 以读为主的关系应尽可能多地建立索引   集簇  将有关的数据元组集中存放于一个或相邻的物理块内或同一柱面内以提高查询效率   HASH   存储结构的设计  分区设计：数据存放位置的设计  减少访盘冲突，提高 I/O 并行性 分散热点数据，均衡 I/O 负担   系统参数配置    </description>
    </item>
    
  </channel>
</rss>
