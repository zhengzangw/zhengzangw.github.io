<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>[&#43;] 静态程序分析 Static Program Analysis on Zangwei</title>
    <link>https://zhengzangw.com/notes/static-program-analysis/</link>
    <description>Recent content in [&#43;] 静态程序分析 Static Program Analysis on Zangwei</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <managingEditor>zzw at smail.nju.edu.cn (Zangwei Zheng)</managingEditor>
    <webMaster>zzw at smail.nju.edu.cn (Zangwei Zheng)</webMaster>
    <lastBuildDate>Sun, 26 Apr 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://zhengzangw.com/notes/static-program-analysis/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Introduction</title>
      <link>https://zhengzangw.com/notes/static-program-analysis/1-introduction/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <author>zzw at smail.nju.edu.cn (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/static-program-analysis/1-introduction/</guid>
      <description>Introduction  Programming Language  Theory: Language Design, Type system, Semantics and logics Environment: Compilers, Runtime system Application: Program analysis, Program verification, Program synthesis   Static Analysis: analyzes program $P$ to reason about its behaviors and determines whether it stisfies some properties before running $P$ Rice&amp;rsquo;s Theorem: Any non-trivial property of behavior of programs in a r.e. langugage is undecidabel  r.e. = recursively enumerable = recognizable by a Turing-machine non-trivial properties $\approx$ interesting properties $\approx$ the properties related with run-time behaviors of programs No Perfect static analysis: Round and Complete   Useful static analysis  Compromise soundness 漏报 Compromise completeness 勿报：Mostly sound but not fully-precise   sound + precise/imprecise + expensive/cheap Abstraction + Over-approximation  Intermediate Representation  soot: java 3AC IR invoke  invokespecial: super, constructor invodevirtual: instance methods call (virtual dispatch) invokeinterface: cannot optimization, checking interface implementation invokestatic: call static methods invokedynamic (Java 7): for dynamic language   method signature  class name return type type method name (parameter types)   BB finding algorithm  Determine leaders  the first instruction target instruction of a conditional or unconditional jump instruction immediately follows a conditional or unconditional jump   BB consists of a leader and all its subsequent instructions until the next leader   Control Flow Graph (CFG)  Basic Blocks(BB): maximal sequences of consecutive three-address instructions with the properties that  enter only at the first instruction in the block exit only at the last instruction in the block   edge from block A to block B iff  there is jump from the end of A to the start of B B immediately follows A in the original order of instructions (except the last instruction is unconditional jump) it is normal to replace the jumps to instruction labels by jumps to basic blocks   Entry Exit    </description>
    </item>
    
    <item>
      <title>Data Flow Analysis</title>
      <link>https://zhengzangw.com/notes/static-program-analysis/2-data-flow-analysis/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <author>zzw at smail.nju.edu.cn (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/static-program-analysis/2-data-flow-analysis/</guid>
      <description>Applications How Data Flows on CFG? How application-specific Data Flows through the Nodes (BB) and Edges (control flows) of CFG (a program)
 may analysis: over-approximation must analysis: under-approximation input and output statses Transfer Function  forward analysis: $\text{OUT}[s]=f_s(\text{IN}[s])$ backward analysis: $\text{IN}[s]=f_s(\text{OUT}[s])$   Control Flow  $\text{IN}[B]=\bigwedge_{P\text{ a predecessor of }B}\text{OUT}[P]$   Key  Domain, Direction, May/Must, Boundary, Initialization, Transfer function, Meet    Reaching Definitions Analysis  definition of a variable: a statement that assigns to a value whether the a definition d is reachable at program point p usage  detect possible undefined variables   $\text{OUT}[B]=\text{gen}_B\cup(\text{IN}[B]-\text{kill}_B)$  Live Variables Analysis  whether the value of variable v at program point p could be used along som path in CFG starting at p usage  register allocations   $\text{OUT}[B]=\bigcup_{\text{S a successor of B}}\text{IN}[B]$ $\text{IN}[B]=\text{use}_B\cup(\text{OUT}[B]-\text{def}_B)$  Available Expressions Analysis  whether an expression must be constant at a point x op y is available if  all paths from the entry to p must pass through the evalution of x op y after the last evaluation of x op y, there is no redefinition of x or y   must-analysis  Constant Propagation  Given a variable $x$ at program point $p$, determine whether $x$ is guaranteed to hold a constant value at $p$ $\text{OUT}[B]=(x,v)$ nondistributivity  Lattice  Partial Order: poset $(P,\subseteq),\subseteq$ is binary relation that defines a partial ordering over $P$, $\subseteq$ has the following properties:  reflexity: $\forall x\in P,x\subseteq x$ antisymmetry: $\forall x,y\in P,x\subseteq y\wedge y\subseteq x\Rightarrow x = y$ transtivity: $\forall x,y,z\in P,x\subseteq y\wedge y\subseteq z\Rightarrow x\subseteq z$   upper bound $u$: $\forall x\in S, x\subseteq u, S\subseteq P$ lower bound $1$: $\forall x\in S, 1\subseteq x$ least upper bound(lub or join) $\cup S\in P$: $\forall u, \cup S\subseteq u$  two elements: $a\cup b$   greatest lower bound(glb or meet) $\cap S$: $\forall 1, 1\subseteq\cap S$  two elements: $a\cap b$ lub and glb is unique   lattice: $\forall a,b\exists a\cup b,a\cap b$ semilattice: $\forall a,b\in P$  only $a\cup b$ exists, $(P,\subseteq)$ is called a join semilattice only $a\cap b$ exists, $(P, \subseteq)$ is called a meet semilattice   complete lattice: $\forall S\subseteq P,\exists\cup S,\cap S$  greatest element $\top=\cup P$ least element $\perp=\cap P$   Every finite lattice is a complete lattice Product Lattice: $L_i=(P_i,\subseteq_i),L^n=(P,\subseteq)$  $P=P_1\times\cdots\times P_n$ $(x_1,\cdots, x_n)\subseteq (y_1,\cdots, y_n)\iff (x_1\subseteq y_1)\wedge\cdots\wedge (x_n\subseteq y_n)$   A product lattice is a lattice if a product lattice $L$ is a product of complete lattices, then $L$ is also complete monotonicity: $f:L\rightarrow L,\forall x,y\in L,x\subseteq y\Rightarrow f(x)\subseteq f(y)$ fixed-point theorem: if $f:L\rightarrow L$ is monotonic and $L$ is finite, then the least fixed point of $f$ can be found by iterating $f^k(\perp)$ until a fixed point is reached, greatest fixed point of $f$ can be found by iterating $f^k(\top)$ height of a lattice $h$: the length of the longest path from Top to Bottom in the lattice distributed $F$: $F(x\cup y)=F(x)\cup F(y)$  Foundation   Iterative Algorithm (IN/OUT equation system)</description>
    </item>
    
    <item>
      <title>Interprocedural Analysis</title>
      <link>https://zhengzangw.com/notes/static-program-analysis/3-interprocedural-analysis/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <author>zzw at smail.nju.edu.cn (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/static-program-analysis/3-interprocedural-analysis/</guid>
      <description>Call Graph (CHA)  Call Graph Construction for OOPLs  Classic hierarchy analysis (CHA) Pointer analysis (k-CFA)   Dispatch(c, m) = m&#39; if c contains non-abstract method m&#39; that has the same name and descriptor as m  else = Dispatch(c&#39;, m), c&#39; is superclass of c   Resolve(a.foo())  virtual call: Dispatch self and subclass    Interprocedural Control-Flow Graph  ICFG: represents structure of the whole program  ICFG = CFGs + call &amp;amp; return edges node transfer + edge transfer    </description>
    </item>
    
    <item>
      <title>Pointer-Analysis</title>
      <link>https://zhengzangw.com/notes/static-program-analysis/4-pointer-analysis/</link>
      <pubDate>Sun, 26 Apr 2020 00:00:00 +0000</pubDate>
      <author>zzw at smail.nju.edu.cn (Zangwei Zheng)</author>
      <guid>https://zhengzangw.com/notes/static-program-analysis/4-pointer-analysis/</guid>
      <description>Pointer-Analysis  Program -&amp;gt; Points-to relations Pointer Analysis: which objects a pointer can point to Alias analysis: can two pointers point to the same object Pointer-Analysis Application  Fundamental information Compiler optimization Bug detection Security analysis       Factor Problem Choice     Heap abstraction How to model heap memory Allocation-site/storeless   Context sensitivity How to model calling contexts Context-sensitive/insensitive   Flow sensitivity How to model control flow Flow-sensitive/insensitive   Analysis scope which parts of program should be analyzed whole-program/demand-driven     allocation-site abstraction: one abstract object per allocation site  Concerned Statements  pointer-affecting statements  New: x = new T() Assign: x = y Store: x.</description>
    </item>
    
  </channel>
</rss>
